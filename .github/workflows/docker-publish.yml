name: Docker Build and Publish

on:
  workflow_call:
    inputs:
      images: 
        description: a list of image names being built and published, seperated by comma
        type: string
        required: true

env:
  REGISTRY: ghcr.io

jobs:
  build-matrix:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set build matrix
        id: set-matrix
        run: |
          echo "${{ toJSON(inputs) }}"
          declare IMAGES
          if [ -z "${{ inputs.images }}" ]; then
            IMAGES="$(./.github/scripts/get-images.sh)" || exit 1
          else
            IMAGES="${{ inputs.images }}"
          fi
          IFS=, IMAGE_ARRAY=(${IMAGES})
          JSON_IMAGES=$(jq --compact-output --null-input '$ARGS.positional' --args -- "${IMAGE_ARRAY[@]}")
          echo "TARGET_MATRIX: ${JSON_IMAGES}"
          echo "::set-output name=images_matrix::${JSON_IMAGES}"
        shell: bash
    outputs:
      target_matrix: ${{ steps.set-matrix.outputs.images_matrix }}

  build:
    needs: build-matrix
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: ${{ github.repository_owner }}/${{ matrix.target }}
    strategy:
      matrix:
        target: ${{ fromJson(needs.build-matrix.outputs.target_matrix) }}
    steps:
      - name: Checkout repository
        run: |
          git clone --filter=blob:none --no-checkout --depth 1 --sparse https://${GITHUB_ACTOR}:${{secrets.GITHUB_TOKEN}}@github.com/${GITHUB_REPOSITORY}.git .
          git sparse-checkout add ${{ matrix.target }}
          git checkout ${GITHUB_SHA}

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker tags
        id: meta
        shell: bash
        run: |
          IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}"
          TAGS=("${IMAGE}:latest")
          VERSION=$(cat "${{ matrix.target }}/VERSION") || true
          if [ -n "${VERSION}" ]; then
            if [[ ${VERSION} =~ ^([[:alnum:]]|[_])([[:alnum:]]|[-_.])*$ ]]
            then
              TAGS+=("${IMAGE}:${VERSION}")
            fi
          fi
          TAGSTR=$(IFS=,; echo "${TAGS[*]}")
          echo "$TAGSTR"
          echo "::set-output name=tags::${TAGSTR}"

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: docker/build-push-action@v3
        with:
          context: ${{ matrix.target }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}